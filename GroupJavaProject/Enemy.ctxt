#BlueJ class context
comment0.target=Enemy
comment0.text=\n\ Write\ a\ description\ of\ class\ Enemy\ here.\n\ \n\ @author\ (your\ name)\ \n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=boolean\ checkForCollision()
comment10.params=
comment10.target=int\ getRepelPriority()
comment10.text=\r\n\ \ \ \ public\ int[]\ pushAwayFromObjects(ArrayList<Actor>\ nearbyObjects,\ double\ minDistance)\ {\r\n\ \ \ \ //\ Get\ the\ current\ position\ of\ this\ actor\r\n\ \ \ \ int\ currentX\ \=\ getX();\r\n\ \ \ \ int\ currentY\ \=\ getY();\r\n\r\n\ \ \ \ //\ Iterate\ through\ the\ nearby\ objects\r\n\ \ \ \ for\ (Actor\ object\ \:\ nearbyObjects)\ {\r\n\ \ \ \ //\ Get\ the\ position\ and\ bounding\ box\ of\ the\ nearby\ object\r\n\ \ \ \ int\ objectX\ \=\ object.getX();\r\n\ \ \ \ int\ objectY\ \=\ object.getY();\r\n\ \ \ \ int\ objectWidth\ \=\ object.getImage().getWidth()/2;\r\n\ \ \ \ int\ objectHeight\ \=\ object.getImage().getHeight()/2\ ;\r\n\r\n\ \ \ \ //\ Calculate\ the\ distance\ between\ this\ actor\ and\ the\ nearby\ object's\ bounding\ oval\r\n\ \ \ \ double\ distance\ \=\ Math.sqrt(Math.pow(currentX\ -\ objectX,\ 2)\ +\ Math.pow(currentY\ -\ objectY,\ 2));\r\n\r\n\ \ \ \ //\ Calculate\ the\ effective\ radii\ of\ the\ bounding\ ovals\r\n\ \ \ \ double\ thisRadius\ \=\ Math.max(getImage().getWidth()\ /\ 2.0,\ getImage().getHeight()\ /\ 2.0);\r\n\ \ \ \ double\ objectRadius\ \=\ Math.max(objectWidth\ /\ 2.0,\ objectHeight\ /\ 2.0);\r\n\r\n\ \ \ \ //\ Check\ if\ the\ distance\ is\ less\ than\ the\ sum\ of\ the\ radii\r\n\ \ \ \ if\ (distance\ <\ (thisRadius\ +\ objectRadius\ +\ minDistance))\ {\r\n\ \ \ \ //\ Calculate\ the\ direction\ vector\ from\ this\ actor\ to\ the\ nearby\ object\r\n\ \ \ \ int\ deltaX\ \=\ objectX\ -\ currentX;\r\n\ \ \ \ int\ deltaY\ \=\ objectY\ -\ currentY;\r\n\r\n\ \ \ \ //\ Calculate\ the\ unit\ vector\ in\ the\ direction\ of\ the\ nearby\ object\r\n\ \ \ \ double\ length\ \=\ Math.sqrt(deltaX\ *\ deltaX\ +\ deltaY\ *\ deltaY);\r\n\ \ \ \ double\ unitX\ \=\ deltaX\ /\ length;\r\n\ \ \ \ double\ unitY\ \=\ deltaY\ /\ length;\r\n\r\n\ \ \ \ //\ Calculate\ the\ amount\ by\ which\ to\ push\ the\ nearby\ object\r\n\ \ \ \ double\ pushAmount\ \=\ (thisRadius\ +\ objectRadius\ +\ minDistance)\ -\ distance;\r\n\r\n\ \ \ \ //\ Update\ the\ position\ of\ the\ nearby\ object\ to\ push\ it\ away\r\n\r\n\ \ \ \ /**\r\n\ Seperate\ push\ direction\ based\ on\ vector\ of\ movement\r\n\ This\ is\ to\ prevent\ cats\ from\ pushing\ eachother\ off\ the\ world\ once\ they\ begin\ \r\n\ walking\ to\ the\ boat\r\n\r\n\ \ \ \ if(objectX\ <\ currentX){\r\n\ \ \ \ cordsVector[0]\ \=\ -(int)(pushAmount\ *\ unitX);\r\n\ \ \ \ }else{\r\n\ \ \ \ cordsVector[0]\ \=\ (int)(pushAmount\ *\ unitX);\r\n\ \ \ \ }\r\n\r\n\ \ \ \ if(objectX\ <\ currentX){\r\n\ \ \ \ cordsVector[1]\ \=\ (int)(pushAmount\ *\ unitY);\r\n\ \ \ \ }else{\r\n\ \ \ \ cordsVector[1]\ \=\ -(int)(pushAmount\ *\ unitY);\r\n\ \ \ \ }\r\n\r\n\ \ \ \ //\ object.setLocation(objectX\ +\ (int)(pushAmount\ *\ unitX),\ objectY\ +\ (int)(pushAmount\ *\ unitY));\r\n\ \ \ \ }\r\n\ \ \ \ }\r\n\r\n\ \ \ \ return\ cordsVector;\r\n}
comment2.params=
comment2.target=void\ damaged()
comment3.params=
comment3.target=void\ attack()
comment4.params=
comment4.target=Enemy()
comment5.params=
comment5.target=void\ act()
comment6.params=
comment6.target=void\ lookForTarget()
comment7.params=
comment7.target=void\ moveWithWorld()
comment8.params=
comment8.target=void\ repelMe()
comment9.params=
comment9.target=void\ checkCollision()
numComments=11
